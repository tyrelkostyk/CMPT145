## Tyrel Kostyk, tck290, 11216033
## CMPT145-04, Lab Section 04
## A7q1-q4; due Friday Saturday March 17th, 2018, 10pm

## Q1:
1. f(n) = O(n!)
2. f(n) = O(2^n)
3. f(n) = O(n^3)
4. f(n) = O( (n^2)log(n) )
5. f(n) = O(n^2.318)

## Q2:
1. f(n) = O(n)
2. f(n) = O(n^2)
3. f(n) = O(log(n))*O(m) = O(m*log(n))
4. f(n) = O(n)*O(m!) = O(n*m!)

## Q3, Worst Case Time Complexity:
a)
line 1: for loop, executed n times: (n assignments, n-1 additions; (2*n - 1))
    line 2: Assignment; (+1)
    line 3: while loop, executed n times: (n comparisons; (*n))
        line 4: Function call & Arithmetic; (+2)
        line 5: Assignment & Arithmetic; (+2)
Worst-Case Time Complexity is: (2*n - 1)*((n)*(4)) = 8*n^2 - 4*n
Big-O Notation: O(n^2)

b)
n is length of alist
line 1: for loop, executed n times: (n assignments & function calls, n-1 additions; (3*n - 1))
    line 2: Assignment; (+1)
    line 3: while loop, executed n times: (n comparisons; (*n))
        line 4: Assignment, subtraction, & 3 list index; (+5)
        line 5: Assignment & Arithmetic; (+2)
Worst-Case Time Complexity is: (3*n - 1)*(1 + (n)*(7)) = 21*n^2 - 4*n - 1
Big-O Notation: O(n^2)

c)
n is length of alist
line 1: for loop, executed n times: (n assignments & function calls, n-1 additions; (3*n - 1) )
    line 2: Assignment; (+1)
    line 3: while loop, executed log(n) times: (log(n) comparisons & function calls; (2*log(n)) )
        line 4: Assignment, subtraction, & 3 list index; (+5)
        line 5: Assignment & Arithmetic; (+2)
Worst-Case Time Complexity is: (3*n - 1)*(1 + 2*log(n)*7) = 42*n*log(n) - 14*log(n) + 3*n - 1
Big-O Notation: O(n*log(n))


## Q4:
line 12: Assignment & function call (+2)
line 13: for loop executed n times: (2*n + 1)
    line 14: for loop executed n times: (2*n + 1)
        line 15: assignment & 2 list indices: (+3)
        line 16: if statement iterating n times w/ an addition & comparison: (2*n)
lines 17 & 18: return, one or the other (+1)
Worst-Case Time Complexity is: 2 + (2*n + 1)*( (2*n + 1)*(3 + 2*n) ) + 1
                            = 8*(n^3) + 20*(n^2) + 14*n + 6
Big-O Notation: O(n^3)
